{
    "parameters": {
        "poolName": {
            "type": "string",
            "metadata": {
                "description": "Id of the pool"
            }
        },
        "maxVmCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The max number of nodes in the Azure Batch pool"
            }
        },
        "vmSize": {
            "type": "string",
            "metadata": {
                "description": "The size of the virtual machines that run the application"
            },
            "defaultValue": "Standard_D4as_v4"
        },
        "maxTasksPerNode": {
            "type": "int",
            "metadata": {
                "description": "Max # of jobs/slots per VM"
            },
            "defaultValue": 1
        },
        "energyPlusPkgVer": {
            "type": "string",
            "metadata": {
                "description": "The EnergyPlus version to run"
            },
            "defaultValue": "9.4.0"
        }
    },
    "variables": {
        "osType": {
            "imageReference": {
                "publisher": "microsoftwindowsserver",
                "offer": "windowsserver",
                "sku": "2019-datacenter",
                "version": "latest"
            },
            "nodeAgentSKUId": "batch.node.windows amd64"
        }
    },
    "pool": {
        "id": "[parameters('poolName')]",
        "displayName": "Windows Server 2019 pool running: [parameters('poolName')]",
        "vmSize": "[parameters('vmSize')]",
        "virtualMachineConfiguration": "[variables('osType')]",
         "applicationPackageReferences": [
          { 
            "applicationId": "energyplus", "version": "[parameters('energyPlusPkgVer')]"
          }
       ],
        "enableAutoScale": true,
        "autoScaleFormula": "startingNumberOfVMs = 0; maxNumberofVMs = 100; pendingTaskSamplePercent = \\$PendingTasks.GetSamplePercent(180 * TimeInterval_Second); pendingTaskSamples = pendingTaskSamplePercent < 70 ? startingNumberOfVMs : avg(\\$PendingTasks.GetSample(180 * TimeInterval_Second)); \\$TargetDedicatedNodes=min(maxNumberofVMs, pendingTaskSamples); \\$NodeDeallocationOption = taskcompletion;",
        "autoScaleEvaluationInterval": "PT5M",
        "enableInterNodeCommunication": false,
        "maxTasksPerNode": "[parameters('maxTasksPerNode')]",
        "taskSchedulingPolicy": {
          "nodeFillType": "Pack"
        }
    }
}